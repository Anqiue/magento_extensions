<?php
/*
 * Arcanum Dev PayPal Enabler
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is available through the world-wide-web at this URL:
 * http://opensource.org/licenses/osl-3.0.php
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to arcanumdev@wafunotamago.com so we can send you a copy immediately.
 *
 * @category	Magento Checkout/Shopping Cart Extension
 * @package		Paypal Currency Enabler
 * @author		Amon Antiga 2012/02/26
 * @copyright	Copyright (c) 2012 Arcanum Dev. Y.K.
 * @license		http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
class Arcanumdev_Paypalenabler_Model_Pro extends Mage_Paypal_Model_Pro{const PAYMENT_REVIEW_ACCEPT='accept';const PAYMENT_REVIEW_DENY='deny';protected $_config=null;protected $_api=null;protected $_infoInstance=null;protected $_apiType='paypal/api_nvp';protected $_configType='paypal/config';public function setMethod($code, $storeId=null){if(null===$this->_config) {$params=array($code);if(null!==$storeId) {$params[]=$storeId;}$this->_config=Mage::getModel($this->_configType, $params);} else {$this->_config->setMethod($code);if(null!==$storeId) {$this->_config->setStoreId($storeId);}}return $this;}public function setConfig(Mage_Paypal_Model_Config $instace, $storeId=null){$this->_config=$instace;if(null!==$storeId) {$this->_config->setStoreId($storeId);}return $this;}public function getConfig(){return $this->_config;}public function getApi(){if(null===$this->_api) {$this->_api=Mage::getModel($this->_apiType);}$this->_api->setConfigObject($this->_config);return $this->_api;}public function resetApi(){$this->_api=null;return $this;}public function getInfo(){if(null===$this->_infoInstance) {$this->_infoInstance=Mage::getModel('paypal/info');}return $this->_infoInstance;}public function importPaymentInfo(Varien_Object $from, Mage_Payment_Model_Info $to){$this->getInfo()->importToPayment($from, $to);if($from->getDataUsingMethod(Mage_Paypal_Model_Info::IS_FRAUD)) {$to->setIsTransactionPending(true);$to->setIsFraudDetected(true);} elseif($this->getInfo()->isPaymentReviewRequired($to)) {$to->setIsTransactionPending(true);}if($this->getInfo()->isPaymentSuccessful($to)) {$to->setIsTransactionApproved(true);} elseif($this->getInfo()->isPaymentFailed($to)) {$to->setIsTransactionDenied(true);}return $this;}public function void(Varien_Object $payment){if($authTransactionId=$this->_getParentTransactionId($payment)) {$api=$this->getApi();$api->setPayment($payment)->setAuthorizationId($authTransactionId)->callDoVoid();$this->importPaymentInfo($api, $payment);} else {Mage::throwException(Mage::helper('paypal')->__('Authorization transaction is required to void.'));}}public function capture(Varien_Object $payment, $amount){$amount=$payment->getOrder()->getGrandTotal();$authTransactionId=$this->_getParentTransactionId($payment);if(!$authTransactionId) {return false;}$api=$this->getApi()->setAuthorizationId($authTransactionId)->setIsCaptureComplete($payment->getShouldCloseParentTransaction())->setAmount($amount)->setCurrencyCode($payment->getOrder()->getCurrentCurrencyCode())->setInvNum($payment->getOrder()->getIncrementId());$api->callDoCapture();$this->_importCaptureResultToPayment($api, $payment);}public function refund(Varien_Object $payment, $amount){$captureTxnId=$this->_getParentTransactionId($payment);if($captureTxnId) {$api=$this->getApi();$order=$payment->getOrder();$api->setPayment($payment)->setTransactionId($captureTxnId)->setAmount($amount)->setCurrencyCode($order->getOrderCurrencyCode());$canRefundMore=$payment->getCreditmemo()->getInvoice()->canRefund();$isFullRefund=!$canRefundMore&& (0==((float)$order->getTotalOnlineRefunded() + (float)$order->getTotalOfflineRefunded()));$api->setRefundType($isFullRefund ? Mage_Paypal_Model_Config::REFUND_TYPE_FULL: Mage_Paypal_Model_Config::REFUND_TYPE_PARTIAL);$api->callRefundTransaction();$this->_importRefundResultToPayment($api, $payment, $canRefundMore);} else {Mage::throwException(Mage::helper('paypal')->__('Impossible to issue a refund transaction because the capture transaction does not exist.'));}}public function cancel(Varien_Object $payment){if(!$payment->getOrder()->getInvoiceCollection()->count()) {$this->void($payment);}}public function canReviewPayment(Mage_Payment_Model_Info $payment){return Mage_Paypal_Model_Info::isPaymentReviewRequired($payment);}public function reviewPayment(Mage_Payment_Model_Info $payment, $action){$api=$this->getApi()->setTransactionId($payment->getLastTransId());$api->callGetTransactionDetails();$this->importPaymentInfo($api, $payment);if(!$this->getInfo()->isPaymentReviewRequired($payment)) {return false;}$api->setAction($action)->callManagePendingTransactionStatus();$api->callGetTransactionDetails();$this->importPaymentInfo($api, $payment);return true;}public function fetchTransactionInfo(Mage_Payment_Model_Info $payment, $transactionId){$api=$this->getApi()->setTransactionId($transactionId)->setRawResponseNeeded(true);$api->callGetTransactionDetails();$this->importPaymentInfo($api, $payment);$data=$api->getRawSuccessResponseData();return ($data) ? $data : array();}public function validateRecurringProfile(Mage_Payment_Model_Recurring_Profile $profile){$errors=array();if(strlen($profile->getSubscriberName()) > 32) {$errors[]=Mage::helper('paypal')->__('Subscriber name is too long.');}$refId=$profile->getInternalReferenceId();if(strlen($refId) > 127) {$errors[]=Mage::helper('paypal')->__('Merchant reference ID format is not supported.');}$scheduleDescr=$profile->getScheduleDescription();if(strlen($refId) > 127) {$errors[]=Mage::helper('paypal')->__('Schedule description is too long.');}if($errors) {Mage::throwException(implode(' ', $errors));}}public function submitRecurringProfile(Mage_Payment_Model_Recurring_Profile $profile,Mage_Payment_Model_Info $paymentInfo) {$api=$this->getApi();Varien_Object_Mapper::accumulateByMap($profile, $api, array('token','subscriber_name', 'start_datetime', 'internal_reference_id', 'schedule_description','suspension_threshold', 'bill_failed_later', 'period_unit', 'period_frequency', 'period_max_cycles','billing_amount' => 'amount', 'trial_period_unit', 'trial_period_frequency', 'trial_period_max_cycles','trial_billing_amount', 'currency_code', 'shipping_amount', 'tax_amount', 'init_amount', 'init_may_fail',));$api->callCreateRecurringPaymentsProfile();$profile->setReferenceId($api->getRecurringProfileId());if($api->getIsProfileActive()) {$profile->setState(Mage_Sales_Model_Recurring_Profile::STATE_ACTIVE);} elseif($api->getIsProfilePending()) {$profile->setState(Mage_Sales_Model_Recurring_Profile::STATE_PENDING);}}public function getRecurringProfileDetails($referenceId, Varien_Object $result){$api=$this->getApi();$api->setRecurringProfileId($referenceId)->callGetRecurringPaymentsProfileDetails($result);}public function updateRecurringProfile(Mage_Payment_Model_Recurring_Profile $profile){}public function updateRecurringProfileStatus(Mage_Payment_Model_Recurring_Profile $profile){$api=$this->getApi();$action=null;switch ($profile->getNewState()) {case Mage_Sales_Model_Recurring_Profile::STATE_CANCELED: $action='cancel'; break;case Mage_Sales_Model_Recurring_Profile::STATE_SUSPENDED: $action='suspend'; break;case Mage_Sales_Model_Recurring_Profile::STATE_ACTIVE: $action='activate'; break;}$state=$profile->getState();$api->setRecurringProfileId($profile->getReferenceId())->setIsAlreadyCanceled($state==Mage_Sales_Model_Recurring_Profile::STATE_CANCELED)->setIsAlreadySuspended($state==Mage_Sales_Model_Recurring_Profile::STATE_SUSPENDED)->setIsAlreadyActive($state==Mage_Sales_Model_Recurring_Profile::STATE_ACTIVE)->setAction($action)->callManageRecurringPaymentsProfileStatus();}protected function _importCaptureResultToPayment($api, $payment){$payment->setTransactionId($api->getTransactionId())->setIsTransactionClosed(false);$this->importPaymentInfo($api, $payment);}protected function _importRefundResultToPayment($api, $payment, $canRefundMore){$payment->setTransactionId($api->getRefundTransactionId())->setIsTransactionClosed(1)->setShouldCloseParentTransaction(!$canRefundMore);$this->importPaymentInfo($api, $payment);}protected function _getParentTransactionId(Varien_Object $payment){return $payment->getParentTransactionId();}}