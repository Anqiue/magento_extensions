<?php
/*
 * Arcanum Dev PayPal Enabler
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is available through the world-wide-web at this URL:
 * http://opensource.org/licenses/osl-3.0.php
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to arcanumdev@wafunotamago.com so we can send you a copy immediately.
 *
 * @category	Magento Checkout/Shopping Cart Extension
 * @package		Paypal Currency Enabler
 * @author		Amon Antiga 2012/02/26
 * @copyright	Copyright (c) 2012 Arcanum Dev. Y.K.
 * @license		http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
class Arcanumdev_Paypalenabler_Model_Express_Checkout extends Mage_Paypal_Model_Express_Checkout{const PAL_CACHE_ID='paypal_express_checkout_pal';const PAYMENT_INFO_TRANSPORT_TOKEN= 'paypal_express_checkout_token';const PAYMENT_INFO_TRANSPORT_SHIPPING_OVERRIDEN='paypal_express_checkout_shipping_overriden';const PAYMENT_INFO_TRANSPORT_SHIPPING_METHOD='paypal_express_checkout_shipping_method';const PAYMENT_INFO_TRANSPORT_PAYER_ID='paypal_express_checkout_payer_id';const PAYMENT_INFO_TRANSPORT_REDIRECT='paypal_express_checkout_redirect_required';const PAYMENT_INFO_TRANSPORT_BILLING_AGREEMENT='paypal_ec_create_ba';protected $_quote=null;protected $_config=null;protected $_api=null;protected $_apiType='paypal/api_nvp';protected $_methodType=Mage_Paypal_Model_Config::METHOD_WPP_EXPRESS;protected $_redirectUrl='';protected $_pendingPaymentMessage='';protected $_checkoutRedirectUrl='';protected $_customerSession;protected $_giropayUrls=array();protected $_isBARequested=false;protected $_customerId=null;protected $_recurringPaymentProfiles=array();protected $_billingAgreement=null;protected $_order=null;public function __construct($params=array()){if (isset($params['quote']) && $params['quote'] instanceof Mage_Sales_Model_Quote){$this->_quote=$params['quote'];}else{throw new Exception('Quote instance is required.');}if (isset($params['config']) && $params['config'] instanceof Mage_Paypal_Model_Config){$this->_config=$params['config'];}else{throw new Exception('Config instance is required.');}$this->_customerSession=Mage::getSingleton('customer/session');}public function getCheckoutShortcutImageUrl(){$pal=null;if ($this->_config->areButtonsDynamic()){$cacheId=self::PAL_CACHE_ID . Mage::app()->getStore()->getId();$pal=Mage::app()->loadCache($cacheId);if (-1 == $pal){$pal=null;}elseif (!$pal){$pal=null;$this->_getApi();try{$this->_api->callGetPalDetails();$pal=$this->_api->getPal();Mage::app()->saveCache($pal, $cacheId, array(Mage_Core_Model_Config::CACHE_TAG));}catch (Exception $e){Mage::app()->saveCache(-1, $cacheId, array(Mage_Core_Model_Config::CACHE_TAG));Mage::logException($e);}}}return $this->_config->getExpressCheckoutShortcutImageUrl(Mage::app()->getLocale()->getLocaleCode(),$this->_quote->getGrandTotal(),$pal);}public function prepareGiropayUrls($successUrl, $cancelUrl, $pendingUrl){$this->_giropayUrls=array($successUrl, $cancelUrl, $pendingUrl);return $this;}public function setIsBillingAgreementRequested($flag){$this->_isBARequested=$flag;return $this;}public function setCustomerId($id){$this->_customerId=$id;return $this;}public function setCustomer($customer){$this->_quote->assignCustomer($customer);$this->_customerId=$customer->getId();return $this;}public function setCustomerWithAddressChange($customer, $billingAddress=null, $shippingAddress=null){$this->_quote->assignCustomerWithAddressChange($customer, $billingAddress, $shippingAddress);$this->_customerId=$customer->getId();return $this;}public function start($returnUrl, $cancelUrl){$this->_quote->collectTotals();if (!$this->_quote->getGrandTotal() && !$this->_quote->hasNominalItems()){Mage::throwException(Mage::helper('paypal')->__('PayPal does not support processing orders with zero amount. To complete your purchase, proceed to the standard checkout process.'));}$this->_quote->reserveOrderId()->save();$this->_getApi();$this->_api->setAmount($this->_quote->getGrandTotal())->setCurrencyCode(Mage::app()->getStore()->getCurrentCurrencyCode())->setInvNum($this->_quote->getReservedOrderId())->setReturnUrl($returnUrl)->setCancelUrl($cancelUrl)->setSolutionType($this->_config->solutionType)->setPaymentAction($this->_config->paymentAction);if ($this->_giropayUrls){list($successUrl, $cancelUrl, $pendingUrl)=$this->_giropayUrls;$this->_api->addData(array('giropay_cancel_url'=>$cancelUrl,'giropay_success_url'=>$successUrl,'giropay_bank_txn_pending_url'=>$pendingUrl,));}$this->_setBillingAgreementRequest();if ($this->_quote->getIsVirtual()){$this->_api->setSuppressShipping(true);}else{$address=$this->_quote->getShippingAddress();$isOverriden=0;if (true===$address->validate()){$isOverriden=1;$this->_api->setAddress($address);}$this->_quote->getPayment()->setAdditionalInformation(self::PAYMENT_INFO_TRANSPORT_SHIPPING_OVERRIDEN, $isOverriden);$this->_quote->getPayment()->save();}$paypalCart=Mage::getModel('paypal/cart', array($this->_quote));$this->_api->setPaypalCart($paypalCart)->setIsLineItemsEnabled($this->_config->lineItemsEnabled);if ($this->_config->lineItemsEnabled && $this->_config->transferShippingOptions && $paypalCart->getItems()){if (!$this->_quote->getIsVirtual() && !$this->_quote->hasNominalItems()){if ($options=$this->_prepareShippingOptions($address, true)){$this->_api->setShippingOptionsCallbackUrl(Mage::getUrl('*/*/shippingOptionsCallback', array('quote_id'=>$this->_quote->getId())))->setShippingOptions($options);}}}if ($profiles=$this->_quote->prepareRecurringPaymentProfiles()){foreach ($profiles as $profile){$profile->setMethodCode(Mage_Paypal_Model_Config::METHOD_WPP_EXPRESS);if (!$profile->isValid()){Mage::throwException($profile->getValidationErrors(true, true));}}$this->_api->addRecurringPaymentProfiles($profiles);}$this->_config->exportExpressCheckoutStyleSettings($this->_api);$this->_api->callSetExpressCheckout();$token=$this->_api->getToken();$this->_redirectUrl=$this->_config->getExpressCheckoutStartUrl($token);$this->_quote->getPayment()->unsAdditionalInformation(self::PAYMENT_INFO_TRANSPORT_BILLING_AGREEMENT);$this->_quote->getPayment()->save();return $token;}public function returnFromPaypal($token){$this->_getApi();$this->_api->setToken($token)->callGetExpressCheckoutDetails();$quote=$this->_quote;$billingAddress=$quote->getBillingAddress();$exportedBillingAddress=$this->_api->getExportedBillingAddress();$quote->setCustomerEmail($billingAddress->getEmail());$quote->setCustomerPrefix($billingAddress->getPrefix());$quote->setCustomerFirstname($billingAddress->getFirstname());$quote->setCustomerMiddlename($billingAddress->getMiddlename());$quote->setCustomerLastname($billingAddress->getLastname());$quote->setCustomerSuffix($billingAddress->getSuffix());$quote->setCustomerNote($exportedBillingAddress->getData('note'));foreach ($exportedBillingAddress->getExportedKeys() as $key){if (!$billingAddress->getDataUsingMethod($key)){$billingAddress->setDataUsingMethod($key, $exportedBillingAddress->getData($key));}}$exportedShippingAddress=$this->_api->getExportedShippingAddress();if (!$quote->getIsVirtual()){$shippingAddress=$quote->getShippingAddress();if ($shippingAddress){if ($exportedShippingAddress){foreach ($exportedShippingAddress->getExportedKeys() as $key){$shippingAddress->setDataUsingMethod($key, $exportedShippingAddress->getData($key));}$shippingAddress->setCollectShippingRates(true);$shippingAddress->setSameAsBilling(0);}$code='';if ($this->_api->getShippingRateCode()){if ($code=$this->_matchShippingMethodCode($shippingAddress, $this->_api->getShippingRateCode())){$shippingAddress->setShippingMethod($code)->setCollectShippingRates(true);}}$quote->getPayment()->setAdditionalInformation(self::PAYMENT_INFO_TRANSPORT_SHIPPING_METHOD,$code);}}$this->_ignoreAddressValidation();$payment=$quote->getPayment();$payment->setMethod($this->_methodType);Mage::getSingleton('paypal/info')->importToPayment($this->_api, $payment);$payment->setAdditionalInformation(self::PAYMENT_INFO_TRANSPORT_PAYER_ID, $this->_api->getPayerId())->setAdditionalInformation(self::PAYMENT_INFO_TRANSPORT_TOKEN, $token);$quote->collectTotals()->save();}public function prepareOrderReview($token=null){$payment=$this->_quote->getPayment();if (!$payment || !$payment->getAdditionalInformation(self::PAYMENT_INFO_TRANSPORT_PAYER_ID)){Mage::throwException(Mage::helper('paypal')->__('Payer is not identified.'));}$this->_quote->setMayEditShippingAddress(1 != $this->_quote->getPayment()->getAdditionalInformation(self::PAYMENT_INFO_TRANSPORT_SHIPPING_OVERRIDEN));$this->_quote->setMayEditShippingMethod('' == $this->_quote->getPayment()->getAdditionalInformation(self::PAYMENT_INFO_TRANSPORT_SHIPPING_METHOD));$this->_ignoreAddressValidation();$this->_quote->collectTotals()->save();}public function getShippingOptionsCallbackResponse(array $request){$logger=Mage::getModel('core/log_adapter', 'payment_' . $this->_methodType . '.log');$debugData=array('request'=>$request, 'response'=>array());try{$this->_getApi();$address=$this->_api->prepareShippingOptionsCallbackAddress($request);$quoteAddress=$this->_quote->getShippingAddress();$options=array();if ($address && $quoteAddress && !$this->_quote->getIsVirtual()){foreach ($address->getExportedKeys() as $key){$quoteAddress->setDataUsingMethod($key, $address->getData($key));}$quoteAddress->setCollectShippingRates(true)->collectTotals();$options=$this->_prepareShippingOptions($quoteAddress, false, true);}$response=$this->_api->setShippingOptions($options)->formatShippingOptionsCallback();$debugData['response']=$response;$logger->log($debugData);return $response;}catch (Exception $e){$logger->log($debugData);throw $e;}}public function updateShippingMethod($methodCode){if (!$this->_quote->getIsVirtual() && $shippingAddress=$this->_quote->getShippingAddress()){if ($methodCode != $shippingAddress->getShippingMethod()){$this->_ignoreAddressValidation();$shippingAddress->setShippingMethod($methodCode)->setCollectShippingRates(true);$this->_quote->collectTotals()->save();}}}public function place($token, $shippingMethodCode=null){if ($shippingMethodCode){$this->updateShippingMethod($shippingMethodCode);}$isNewCustomer=false;switch ($this->_quote->getCheckoutMethod()){case Mage_Checkout_Model_Type_Onepage::METHOD_GUEST:$this->_prepareGuestQuote();break;case Mage_Checkout_Model_Type_Onepage::METHOD_REGISTER:$this->_prepareNewCustomerQuote();$isNewCustomer=true;break;default:$this->_prepareCustomerQuote();break;}$this->_ignoreAddressValidation();$this->_quote->collectTotals();$service=Mage::getModel('sales/service_quote', $this->_quote);$service->submitAll();$this->_quote->save();if ($isNewCustomer){try{$this->_involveNewCustomer();}catch (Exception $e){Mage::logException($e);}}$this->_recurringPaymentProfiles=$service->getRecurringPaymentProfiles();$order=$service->getOrder();if (!$order){return;}$this->_billingAgreement=$order->getPayment()->getBillingAgreement();if ($order->getPayment()->getAdditionalInformation(Mage_Paypal_Model_Express_Checkout::PAYMENT_INFO_TRANSPORT_REDIRECT)){$this->_redirectUrl=$this->_config->getExpressCheckoutCompleteUrl($token);}switch ($order->getState()){case Mage_Sales_Model_Order::STATE_PENDING_PAYMENT:break;case Mage_Sales_Model_Order::STATE_PROCESSING:case Mage_Sales_Model_Order::STATE_COMPLETE:case Mage_Sales_Model_Order::STATE_PAYMENT_REVIEW:$order->sendNewOrderEmail();break;}$this->_order=$order;}private function _ignoreAddressValidation(){$this->_quote->getBillingAddress()->setShouldIgnoreValidation(true);if (!$this->_quote->getIsVirtual()){$this->_quote->getShippingAddress()->setShouldIgnoreValidation(true);}}public function getRedirectUrl(){return $this->_redirectUrl;}public function getRecurringPaymentProfiles(){return $this->_recurringPaymentProfiles;}public function getBillingAgreement(){return $this->_billingAgreement;}public function getOrder(){return $this->_order;}protected function _setBillingAgreementRequest(){if (!$this->_customerId || $this->_quote->hasNominalItems()){return $this;}$isRequested=$this->_isBARequested || $this->_quote->getPayment()->getAdditionalInformation(self::PAYMENT_INFO_TRANSPORT_BILLING_AGREEMENT);if (!($this->_config->allow_ba_signup == Mage_Paypal_Model_Config::EC_BA_SIGNUP_AUTO|| $isRequested && $this->_config->shouldAskToCreateBillingAgreement())){return $this;}if (!Mage::getModel('sales/billing_agreement')->needToCreateForCustomer($this->_customerId)){return $this;}$this->_api->setBillingType($this->_api->getBillingAgreementType());return $this;}protected function _getApi(){if (null===$this->_api){$this->_api=Mage::getModel($this->_apiType)->setConfigObject($this->_config);}return $this->_api;}protected function _prepareShippingOptions(Mage_Sales_Model_Quote_Address $address,$mayReturnEmpty=false, $calculateTax=false){$options=array(); $i=0; $iMin=false; $min=false;$userSelectedOption=null;foreach ($address->getGroupedAllShippingRates() as $group){foreach ($group as $rate){$amount=(float)$rate->getPrice();$amount=Mage::app()->getStore()->convertPrice($amount);if ($rate->getErrorMessage()){continue;}$isDefault=$address->getShippingMethod()===$rate->getCode();$amountExclTax=Mage::helper('tax')->getShippingPrice($amount, false, $address);$amountInclTax=Mage::helper('tax')->getShippingPrice($amount, true, $address);$options[$i]=new Varien_Object(array('is_default'=>$isDefault,'name'  =>trim("{$rate->getCarrierTitle()}-{$rate->getMethodTitle()}", ' -'),'code'  =>$rate->getCode(),'amount'=>$amountExclTax,));if ($calculateTax){$options[$i]->setTaxAmount($amountInclTax - $amountExclTax+ $address->getTaxAmount() - $address->getShippingTaxAmount());}if ($isDefault){$userSelectedOption=$options[$i];}if (false===$min || $amountInclTax < $min){$min=$amountInclTax;$iMin=$i;}$i++;}}if ($mayReturnEmpty && is_null($userSelectedOption)){$options[]=new Varien_Object(array('is_default'=>true,'name'  =>Mage::helper('paypal')->__('N/A'),'code'  =>'no_rate','amount'=>0.00,));if ($calculateTax){$options[$i]->setTaxAmount($address->getTaxAmount());}}elseif (is_null($userSelectedOption) && isset($options[$iMin])){$options[$iMin]->setIsDefault(true);}if (count($options) > 10){usort($options, array(get_class($this),'cmpShippingOptions'));array_splice($options, 10);if (!is_null($userSelectedOption) && !in_array($userSelectedOption, $options)){$options[9]=$userSelectedOption;}}return $options;}protected static function cmpShippingOptions(Varien_Object $option1, Varien_Object $option2){if ($option1->getAmount() == $option2->getAmount()){return 0;}return ($option1->getAmount() < $option2->getAmount()) ? -1 : 1;}protected function _matchShippingMethodCode(Mage_Sales_Model_Quote_Address $address, $selectedCode){$options=$this->_prepareShippingOptions($address, false);foreach ($options as $option){if ($selectedCode===$option['code']|| $selectedCode===$option['name']|| $selectedCode==="{$option['code']}{$option['name']}"){return $option['code'];}}return '';}protected function _prepareGuestQuote(){$quote=$this->_quote;$quote->setCustomerId(null)->setCustomerEmail($quote->getBillingAddress()->getEmail())->setCustomerIsGuest(true)->setCustomerGroupId(Mage_Customer_Model_Group::NOT_LOGGED_IN_ID);return $this;}protected function _prepareNewCustomerQuote(){$quote =$this->_quote;$billing= $quote->getBillingAddress();$shipping  =$quote->isVirtual() ? null : $quote->getShippingAddress();$customer=$quote->getCustomer();$customerBilling=$billing->exportCustomerAddress();$customer->addAddress($customerBilling);$billing->setCustomerAddress($customerBilling);$customerBilling->setIsDefaultBilling(true);if ($shipping && !$shipping->getSameAsBilling()){$customerShipping=$shipping->exportCustomerAddress();$customer->addAddress($customerShipping);$shipping->setCustomerAddress($customerShipping);$customerShipping->setIsDefaultShipping(true);}elseif ($shipping){$customerBilling->setIsDefaultShipping(true);}if ($quote->getCustomerDob() && !$billing->getCustomerDob()){$billing->setCustomerDob($quote->getCustomerDob());}if ($quote->getCustomerTaxvat() && !$billing->getCustomerTaxvat()){$billing->setCustomerTaxvat($quote->getCustomerTaxvat());}if ($quote->getCustomerGender() && !$billing->getCustomerGender()){$billing->setCustomerGender($quote->getCustomerGender());}Mage::helper('core')->copyFieldset('checkout_onepage_billing', 'to_customer', $billing, $customer);$customer->setEmail($quote->getCustomerEmail());$customer->setPrefix($quote->getCustomerPrefix());$customer->setFirstname($quote->getCustomerFirstname());$customer->setMiddlename($quote->getCustomerMiddlename());$customer->setLastname($quote->getCustomerLastname());$customer->setSuffix($quote->getCustomerSuffix());$customer->setPassword($customer->decryptPassword($quote->getPasswordHash()));$customer->setPasswordHash($customer->hashPassword($customer->getPassword()));$quote->setCustomer($customer)->setCustomerId(true);return $this;}protected function _prepareCustomerQuote(){$quote =$this->_quote;$billing= $quote->getBillingAddress();$shipping  =$quote->isVirtual() ? null : $quote->getShippingAddress();$customer=$this->getCustomerSession()->getCustomer();if (!$billing->getCustomerId() || $billing->getSaveInAddressBook()){$customerBilling=$billing->exportCustomerAddress();$customer->addAddress($customerBilling);$billing->setCustomerAddress($customerBilling);}if ($shipping && ((!$shipping->getCustomerId() && !$shipping->getSameAsBilling())|| (!$shipping->getSameAsBilling() && $shipping->getSaveInAddressBook()))){$customerShipping=$shipping->exportCustomerAddress();$customer->addAddress($customerShipping);$shipping->setCustomerAddress($customerShipping);}if (isset($customerBilling) && !$customer->getDefaultBilling()){$customerBilling->setIsDefaultBilling(true);}if ($shipping && isset($customerBilling) && !$customer->getDefaultShipping() && $shipping->getSameAsBilling()){$customerBilling->setIsDefaultShipping(true);}elseif ($shipping && isset($customerShipping) && !$customer->getDefaultShipping()){$customerShipping->setIsDefaultShipping(true);}$quote->setCustomer($customer);return $this;}protected function _involveNewCustomer(){$customer=$this->_quote->getCustomer();if ($customer->isConfirmationRequired()){$customer->sendNewAccountEmail('confirmation');$url=Mage::helper('customer')->getEmailConfirmationUrl($customer->getEmail());$this->getCustomerSession()->addSuccess(Mage::helper('customer')->__('Account confirmation is required. Please, check your e-mail for confirmation link. To resend confirmation email please <a href="%s">click here</a>.', $url));}else{$customer->sendNewAccountEmail();$this->getCustomerSession()->loginById($customer->getId());}return $this;}public function getCustomerSession(){return $this->_customerSession;}}