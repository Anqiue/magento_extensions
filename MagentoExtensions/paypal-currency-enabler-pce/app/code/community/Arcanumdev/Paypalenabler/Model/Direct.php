<?php
/*
 * Arcanum Dev PayPal Enabler
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is available through the world-wide-web at this URL:
 * http://opensource.org/licenses/osl-3.0.php
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to arcanumdev@wafunotamago.com so we can send you a copy immediately.
 *
 * @category	Magento Checkout/Shopping Cart Extension
 * @package		Paypal Currency Enabler
 * @author		Amon Antiga 2012/02/26
 * @copyright	Copyright (c) 2012 Arcanum Dev. Y.K.
 * @license		http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
class Arcanumdev_Paypalenabler_Model_Direct extends Mage_Paypal_Model_Direct{protected $_code=Mage_Paypal_Model_Config::METHOD_WPP_DIRECT;protected $_infoBlockType='paypal/payment_info';protected $_isGateway=true;protected $_canAuthorize=true;protected $_canCapture=true;protected $_canCapturePartial=true;protected $_canRefund=true;protected $_canRefundInvoicePartial=true;protected $_canVoid=true;protected $_canUseInternal=true;protected $_canUseCheckout=true;protected $_canUseForMultishipping=true;protected $_canSaveCc=false;protected $_canFetchTransactionInfo=true;protected $_canReviewPayment=true;protected $_pro=null;protected $_proType='paypal/pro';public function __construct($params=array()){$proInstance=array_shift($params);if ($proInstance && ($proInstance instanceof Mage_Paypal_Model_Pro)) {$this->_pro=$proInstance;}else{$this->_pro=Mage::getModel($this->_proType);}$this->_pro->setMethod($this->_code);}public function setStore($store){$this->setData('store',$store);if (null===$store) {$store=Mage::app()->getStore()->getId();}$this->_pro->getConfig()->setStoreId(is_object($store) ? $store->getId() : $store);return $this;}public function canUseForCurrency($currencyCode){return $this->_pro->getConfig()->isCurrencyCodeSupported($currencyCode);}public function getConfigPaymentAction(){return $this->_pro->getConfig()->getPaymentAction();}public function getAllowedCcTypes(){$ccTypes=explode(',',$this->_pro->getConfig()->cctypes);$country=$this->_pro->getConfig()->getMerchantCountry();if ($country=='GB') {$ccTypes=array_intersect(array('SM','SO','MC','DI','VI'),$ccTypes);} elseif ($country=='CA') {$ccTypes=array_intersect(array('MC','VI'),$ccTypes);}return implode(',',$ccTypes);}public function isAvailable($quote=null){if (parent::isAvailable($quote) && $this->_pro->getConfig()->isMethodAvailable()) {return true;}return false;}public function getConfigData($field,$storeId=null){$value=null;switch ($field){case 'cctypes':$value=$this->getAllowedCcTypes();break;default:$value=$this->_pro->getConfig()->$field;}return $value;}public function authorize(Varien_Object $payment,$amount){		$amount=Mage::getSingleton('checkout/session')->getQuote()->getGrandTotal();return $this->_placeOrder($payment,$amount);}public function void(Varien_Object $payment){$this->_pro->void($payment);return $this;}public function capture(Varien_Object $payment,$amount){		$amount=$payment->getOrder()->getGrandTotal();if (false===$this->_pro->capture($payment,$amount)) {$this->_placeOrder($payment,$amount);}return $this;}public function refund(Varien_Object $payment,$amount){$this->_pro->refund($payment,$amount);return $this;}public function cancel(Varien_Object $payment){$this->void($payment);return $this;}public function canReviewPayment(Mage_Payment_Model_Info $payment){return parent::canReviewPayment($payment) && $this->_pro->canReviewPayment($payment);}public function acceptPayment(Mage_Payment_Model_Info $payment){parent::acceptPayment($payment);return $this->_pro->reviewPayment($payment, Mage_Paypal_Model_Pro::PAYMENT_REVIEW_ACCEPT);}public function denyPayment(Mage_Payment_Model_Info $payment){parent::denyPayment($payment);return $this->_pro->reviewPayment($payment, Mage_Paypal_Model_Pro::PAYMENT_REVIEW_DENY);}public function getCentinelValidator(){$validator=parent::getCentinelValidator();if (!$validator->getCustomApiEndpointUrl()) {$validator->setCustomApiEndpointUrl($this->_pro->getConfig()->centinelDefaultApiUrl);}return $validator;}public function fetchTransactionInfo(Mage_Payment_Model_Info $payment,$transactionId){return $this->_pro->fetchTransactionInfo($payment,$transactionId);}protected function _placeOrder(Mage_Sales_Model_Order_Payment $payment,$amount){$order=$payment->getOrder();$api=$this->_pro->getApi()->setPaymentAction($this->_pro->getConfig()->paymentAction)->setIpAddress(Mage::app()->getRequest()->getClientIp(false))->setAmount($amount)->setCurrencyCode($order->getOrderCurrencyCode())->setInvNum($order->getIncrementId())->setEmail($order->getCustomerEmail())->setNotifyUrl(Mage::getUrl('paypal/ipn/'))->setCreditCardType($payment->getCcType())->setCreditCardNumber($payment->getCcNumber())->setCreditCardExpirationDate($this->_getFormattedCcExpirationDate($payment->getCcExpMonth(),$payment->getCcExpYear()))->setCreditCardCvv2($payment->getCcCid())->setMaestroSoloIssueNumber($payment->getCcSsIssue());if ($payment->getCcSsStartMonth() && $payment->getCcSsStartYear()) {$year=sprintf('%02d', substr($payment->getCcSsStartYear(), -2, 2));$api->setMaestroSoloIssueDate($this->_getFormattedCcExpirationDate($payment->getCcSsStartMonth(),$year));}if ($this->getIsCentinelValidationEnabled()) {$this->getCentinelValidator()->exportCmpiData($api);}if ($order->getIsVirtual()) {$api->setAddress($order->getBillingAddress())->setSuppressShipping(true);}else{$api->setAddress($order->getShippingAddress());$api->setBillingAddress($order->getBillingAddress());}$api->setPaypalCart(Mage::getModel('paypal/cart', array($order)))->setIsLineItemsEnabled($this->_pro->getConfig()->lineItemsEnabled);$api->callDoDirectPayment();$this->_importResultToPayment($api,$payment);try {$api->callGetTransactionDetails();} catch (Mage_Core_Exception $e) {$payment->setIsTransactionPending(true);}$this->_importResultToPayment($api,$payment);return $this;}protected function _getFormattedCcExpirationDate($month,$year){return sprintf('%02d%02d',$month,$year);}protected function _importResultToPayment($api,$payment){$payment->setTransactionId($api->getTransactionId())->setIsTransactionClosed(0);$this->_pro->importPaymentInfo($api,$payment);}public function canVoid(Varien_Object $payment){if ($payment instanceof Mage_Sales_Model_Order_Invoice|| $payment instanceof Mage_Sales_Model_Order_Creditmemo) {return false;}return $this->_canVoid;}}