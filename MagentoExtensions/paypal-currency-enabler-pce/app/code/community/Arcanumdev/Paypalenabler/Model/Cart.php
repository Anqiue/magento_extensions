<?php
/*
 * Arcanum Dev PayPal Enabler
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is available through the world-wide-web at this URL:
 * http://opensource.org/licenses/osl-3.0.php
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to arcanumdev@wafunotamago.com so we can send you a copy immediately.
 *
 * @category	Magento Checkout/Shopping Cart Extension
 * @package		Paypal Currency Enabler
 * @author		Amon Antiga 2012/02/26
 * @copyright	Copyright (c) 2012 Arcanum Dev. Y.K.
 * @license		http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
class Arcanumdev_Paypalenabler_Model_Cart extends Mage_Paypal_Model_Cart{const TOTAL_SUBTOTAL='subtotal';const TOTAL_DISCOUNT='discount';const TOTAL_TAX='tax';const TOTAL_SHIPPING='shipping';protected $_salesEntity=null;protected $_items=array();protected $_totals=array();protected $_totalLineItemDescriptions=array();protected $_shouldRender=true;protected $_areItemsValid=false;protected $_areTotalsValid=false;protected $_isDiscountAsItem=false;protected $_isShippingAsItem=false;public function __construct($params=array()){$salesEntity=array_shift($params);if (is_object($salesEntity)&&(($salesEntity instanceof Mage_Sales_Model_Order) || ($salesEntity instanceof Mage_Sales_Model_Quote))){$this->_salesEntity=$salesEntity;}else{throw new Exception('Invalid sales entity provided.');}}public function getSalesEntity(){return $this->_salesEntity;}public function getItems($bypassValidation=false){$this->_render();if (!$bypassValidation&&!$this->_areItemsValid){return false;}return $this->_items;}public function getTotals($mergeDiscount=false){$this->_render();if (!$this->_areTotalsValid){$totals=array(self::TOTAL_SUBTOTAL=>$this->_totals[self::TOTAL_SUBTOTAL]+$this->_totals[self::TOTAL_TAX]);if (!$this->_isShippingAsItem){$totals[self::TOTAL_SUBTOTAL]+=$this->_totals[self::TOTAL_SHIPPING];}if (!$this->_isDiscountAsItem){$totals[self::TOTAL_SUBTOTAL]-=$this->_totals[self::TOTAL_DISCOUNT];}return $totals;}elseif ($mergeDiscount){$totals=$this->_totals;unset($totals[self::TOTAL_DISCOUNT]);if (!$this->_isDiscountAsItem){$totals[self::TOTAL_SUBTOTAL]-=$this->_totals[self::TOTAL_DISCOUNT];}return $totals;}return $this->_totals;}public function addItem($name, $qty, $amount, $identifier=null){$this->_shouldRender=true;$item=new Varien_Object(array('name'=>$name,'qty'=>$qty,'amount'=>(float)$amount,));if ($identifier){$item->setData('id', $identifier);}$this->_items[]=$item;return $item;}public function removeItem($identifier){foreach ($this->_items as $key=>$item){if ($item->getId()==$identifier){unset($this->_items[$key]);return true;}}return false;}public function updateTotal($code, $amount, $lineItemDescription=null){$this->_shouldRender=true;if (isset($this->_totals[$code])){$this->_totals[$code]+=$amount;if ($lineItemDescription){$this->_totalLineItemDescriptions[$code][]=$lineItemDescription;}}return $this;}public function isDiscountAsItem($setValue=null){return $this->_totalAsItem('_isDiscountAsItem', $setValue);}public function isShippingAsItem($setValue=null){return $this->_totalAsItem('_isShippingAsItem', $setValue);}protected function _render(){if (!$this->_shouldRender){return;}$this->_items=array();foreach ($this->_salesEntity->getAllItems() as $item){if (!$item->getParentItem()){$this->_addRegularItem($item);}}end($this->_items);$lastRegularItemKey=key($this->_items);$shippingDescription='';if ($this->_salesEntity instanceof Mage_Sales_Model_Order){$shippingDescription=$this->_salesEntity->getShippingDescription();$this->_totals=array(self::TOTAL_SUBTOTAL=>$this->_salesEntity->getSubtotal(),self::TOTAL_TAX=>$this->_salesEntity->getTaxAmount(),self::TOTAL_SHIPPING=>$this->_salesEntity->getShippingAmount(),self::TOTAL_DISCOUNT=>abs($this->_salesEntity->getDiscountAmount()),);$this->_applyHiddenTaxWorkaround($this->_salesEntity);}else{$address=$this->_salesEntity->getIsVirtual() ?$this->_salesEntity->getBillingAddress() : $this->_salesEntity->getShippingAddress();$shippingDescription=$address->getShippingDescription();$this->_totals=array (self::TOTAL_SUBTOTAL=>$this->_salesEntity->getSubtotal(),self::TOTAL_TAX=>$address->getTaxAmount(),self::TOTAL_SHIPPING=>$address->getShippingAmount(),self::TOTAL_DISCOUNT=>abs($address->getDiscountAmount()),);$this->_applyHiddenTaxWorkaround($address);}$originalDiscount=$this->_totals[self::TOTAL_DISCOUNT];Mage::dispatchEvent('paypal_prepare_line_items', array('paypal_cart'=>$this));if ($originalDiscount > 0.0001&&isset($this->_totalLineItemDescriptions[self::TOTAL_DISCOUNT])){$this->_totalLineItemDescriptions[self::TOTAL_DISCOUNT][]=Mage::helper('sales')->__('Discount (%s)', Mage::app()->getStore()->convertPrice($originalDiscount, true, false));}if ($this->_isDiscountAsItem&&$this->_totals[self::TOTAL_DISCOUNT]){$this->addItem(Mage::helper('paypal')->__('Discount'), 1, -1.00 * $this->_totals[self::TOTAL_DISCOUNT],$this->_renderTotalLineItemDescriptions(self::TOTAL_DISCOUNT));}$shippingItemId=$this->_renderTotalLineItemDescriptions(self::TOTAL_SHIPPING, $shippingDescription);if ($this->_isShippingAsItem&&(float)$this->_totals[self::TOTAL_SHIPPING]){$this->addItem(Mage::helper('paypal')->__('Shipping'), 1, (float)$this->_totals[self::TOTAL_SHIPPING],$shippingItemId);}foreach ($this->_items as $key=>$item){if ($key > $lastRegularItemKey&&$item->getAmount() !=0){$this->_totals[self::TOTAL_SUBTOTAL]+=$item->getAmount();}}$this->_validate();if (!$this->_areItemsValid){$this->removeItem($shippingItemId);}$this->_shouldRender=false;}protected function _renderTotalLineItemDescriptions($code, $prepend='', $append='', $glue='; '){$result=array();if ($prepend){$result[]=$prepend;}if (isset($this->_totalLineItemDescriptions[$code])){$result=array_merge($this->_totalLineItemDescriptions[$code]);}if ($append){$result[]=$append;}return implode($glue, $result);}protected function _validate(){$this->_areItemsValid=false;$this->_areTotalsValid=false;$referenceAmount=$this->_salesEntity->getGrandTotal();$itemsSubtotal=0;foreach ($this->_items as $i){$itemsSubtotal=$itemsSubtotal+$i['qty'] * $i['amount'];}$sum=$itemsSubtotal+$this->_totals[self::TOTAL_TAX];if (!$this->_isShippingAsItem){$sum+=$this->_totals[self::TOTAL_SHIPPING];}if (!$this->_isDiscountAsItem){$sum-=$this->_totals[self::TOTAL_DISCOUNT];}if (sprintf('%.4F', $sum)==sprintf('%.4F', $referenceAmount)){$this->_areItemsValid=true;}if (!$this->_isDiscountAsItem){$this->_areTotalsValid=round($this->_totals[self::TOTAL_DISCOUNT], 4) < round($itemsSubtotal, 4);}else{$this->_areTotalsValid=$itemsSubtotal > 0.00001;}$this->_areItemsValid=$this->_areItemsValid&&$this->_areTotalsValid;}protected function _addRegularItem(Varien_Object $salesItem){if ($this->_salesEntity instanceof Mage_Sales_Model_Order){$qty=(int) $salesItem->getQtyOrdered();$amount=(float) $salesItem->getPrice();}else{$qty=(int) $salesItem->getTotalQty();$amount=$salesItem->isNominal() ? 0 : (float) $salesItem->getCalculationPrice();}$subAggregatedLabel='';if ($amount - round($amount, 2)){$amount=$amount * $qty;$subAggregatedLabel=' x'.$qty;$qty=1;}if (round(($amount * $qty),2) !=round($salesItem->getRowTotal(),2)){$amount=(float) $salesItem->getRowTotal();$subAggregatedLabel=' x'.$qty;$qty=1;}return $this->addItem($salesItem->getName().$subAggregatedLabel, $qty, $amount, $salesItem->getSku());}private function _totalAsItem($var, $setValue=null){if (null !==$setValue){if ($setValue !=$this->$var){$this->_shouldRender=true;}$this->$var=$setValue;return $this;}return $this->$var;}private function _applyHiddenTaxWorkaround($salesEntity){$this->_totals[self::TOTAL_TAX]+=(float)$salesEntity->getHiddenTaxAmount();$this->_totals[self::TOTAL_TAX]+=(float)$salesEntity->getShippingHiddenTaxAmount();}}