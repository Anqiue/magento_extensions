<?php
/*
 * Arcanum Dev PayPal Enabler
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is available through the world-wide-web at this URL:
 * http://opensource.org/licenses/osl-3.0.php
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to arcanumdev@wafunotamago.com so we can send you a copy immediately.
 *
 * @category	Magento Checkout/Shopping Cart Extension
 * @package		Paypal Currency Enabler
 * @author		Amon Antiga 2012/02/26
 * @copyright	Copyright (c) 2012 Arcanum Dev. Y.K.
 * @license		http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
class Arcanumdev_Paypalenabler_Model_Express extends Mage_Paypal_Model_Express implements Mage_Payment_Model_Recurring_Profile_MethodInterface{protected $_code=Mage_Paypal_Model_Config::METHOD_WPP_EXPRESS; protected $_formBlockType='paypal/express_form'; protected $_infoBlockType='paypal/payment_info'; protected $_proType='paypal/pro'; protected $_isGateway=false; protected $_canOrder=true; protected $_canAuthorize=true; protected $_canCapture=true; protected $_canCapturePartial=true; protected $_canRefund=true; protected $_canRefundInvoicePartial=true; protected $_canVoid=true; protected $_canUseInternal=false; protected $_canUseCheckout=true; protected $_canUseForMultishipping=false; protected $_canFetchTransactionInfo=true; protected $_canCreateBillingAgreement=true; protected $_canReviewPayment=true; protected $_pro=null; protected $_isOrderPaymentActionKey='is_order_action'; protected $_authorizationCountKey='authorization_count'; public function __construct($params=array()){$proInstance=array_shift($params); if($proInstance && ($proInstance instanceof Mage_Paypal_Model_Pro)){$this->_pro=$proInstance;}else{$this->_pro=Mage::getModel($this->_proType);}$this->_pro->setMethod($this->_code);}public function setStore($store){$this->setData('store',$store); if(null===$store){$store=Mage::app()->getStore()->getId();}$this->_pro->getConfig()->setStoreId(is_object($store) ? $store->getId() : $store); return $this;}public function canUseForCurrency($currencyCode){return $this->_pro->getConfig()->isCurrencyCodeSupported($currencyCode);}public function getConfigPaymentAction(){return $this->_pro->getConfig()->getPaymentAction();}public function isAvailable($quote=null){if(parent::isAvailable($quote) && $this->_pro->getConfig()->isMethodAvailable()){return true;}return false;}public function getConfigData($field,$storeId=null){return $this->_pro->getConfig()->$field;}public function order(Varien_Object $payment,$amount){$amount=Mage::getSingleton('checkout/session')->getQuote()->getGrandTotal(); $this->_placeOrder($payment,$amount); $payment->setAdditionalInformation($this->_isOrderPaymentActionKey, true); if($payment->getIsFraudDetected()){return $this;}$order=$payment->getOrder(); $orderTransactionId=$payment->getTransactionId(); $api=$this->_callDoAuthorize($amount,$payment,$payment->getTransactionId()); $state=Mage_Sales_Model_Order::STATE_PROCESSING; $status=true; $formatedPrice=$order->getOrderCurrency()->formatTxt($amount); if($payment->getIsTransactionPending()){$message=Mage::helper('paypal')->__('Ordering amount of %s is pending approval on gateway.',$formatedPrice); $state=Mage_Sales_Model_Order::STATE_PAYMENT_REVIEW;}else{$message=Mage::helper('paypal')->__('Ordered amount of %s.',$formatedPrice);}$payment->addTransaction(Mage_Sales_Model_Order_Payment_Transaction::TYPE_ORDER, null, false,$message); $this->_pro->importPaymentInfo($api,$payment); if($payment->getIsTransactionPending()){$message=Mage::helper('paypal')->__('Authorizing amount of %s is pending approval on gateway.',$formatedPrice); $state=Mage_Sales_Model_Order::STATE_PAYMENT_REVIEW; if($payment->getIsFraudDetected()){$status=Mage_Sales_Model_Order::STATUS_FRAUD;}}else{$message=Mage::helper('paypal')->__('Authorized amount of %s.',$formatedPrice);}$payment->resetTransactionAdditionalInfo(); $payment->setTransactionId($api->getTransactionId()); $payment->setParentTransactionId($orderTransactionId); $transaction=$payment->addTransaction(Mage_Sales_Model_Order_Payment_Transaction::TYPE_AUTH, null, false,$message ); $order->setState($state,$status); $payment->setSkipOrderProcessing(true); return $this;}public function authorize(Varien_Object $payment,$amount){$amount=Mage::getSingleton('checkout/session')->getQuote()->getGrandTotal(); return $this->_placeOrder($payment,$amount);}public function void(Varien_Object $payment){if($payment->getAdditionalInformation($this->_isOrderPaymentActionKey) && !$payment->getVoidOnlyAuthorization() ){$orderTransaction=$payment->lookupTransaction( false, Mage_Sales_Model_Order_Payment_Transaction::TYPE_ORDER ); if($orderTransaction){$payment->setParentTransactionId($orderTransaction->getTxnId()); $payment->setTransactionId($orderTransaction->getTxnId() . '-void');}}$this->_pro->void($payment); return $this;}public function capture(Varien_Object $payment,$amount){$amount=$payment->getOrder()->getGrandTotal(); $authorizationTransaction=$payment->getAuthorizationTransaction(); $authorizationPeriod=abs(intval($this->getConfigData('authorization_honor_period'))); $maxAuthorizationNumber=abs(intval($this->getConfigData('child_authorization_number'))); $order=$payment->getOrder(); $isAuthorizationCreated=false; if($payment->getAdditionalInformation($this->_isOrderPaymentActionKey)){$voided=false; if(!$authorizationTransaction->getIsClosed() && $this->_isTransactionExpired($authorizationTransaction,$authorizationPeriod) ){$isCaptureFinal=$payment->getShouldCloseParentTransaction(); $captureTrxId=$payment->getTransactionId(); $payment->setShouldCloseParentTransaction(false); $payment->setParentTransactionId($authorizationTransaction->getTxnId()); $payment->unsTransactionId(); $payment->setVoidOnlyAuthorization(true); $payment->void(new Varien_Object()); $payment->unsAuthorizationTransaction(); $payment->unsTransactionId(); $payment->setShouldCloseParentTransaction($isCaptureFinal); $voided=true;}if($authorizationTransaction->getIsClosed() || $voided){if($payment->getAdditionalInformation($this->_authorizationCountKey) > $maxAuthorizationNumber - 1){Mage::throwException(Mage::helper('paypal')->__('The maximum number of child authorizations is reached.'));}$api=$this->_callDoAuthorize( $amount,$payment,$authorizationTransaction->getParentTxnId() ); $this->_pro->importPaymentInfo($api,$payment); $payment->setTransactionId($api->getTransactionId()); $payment->setParentTransactionId($authorizationTransaction->getParentTxnId()); $payment->setIsTransactionClosed(false); $formatedPrice=$order->getOrderCurrency()->formatTxt($amount); if($payment->getIsTransactionPending()){$message=Mage::helper('paypal')->__('Authorizing amount of %s is pending approval on gateway.',$formatedPrice);}else{$message=Mage::helper('paypal')->__('Authorized amount of %s.',$formatedPrice);}$transaction=$payment->addTransaction(Mage_Sales_Model_Order_Payment_Transaction::TYPE_AUTH, null, true,$message ); $payment->setParentTransactionId($api->getTransactionId()); $isAuthorizationCreated=true;}if($payment->getShouldCloseParentTransaction()){$orderTransaction=$payment->lookupTransaction( false, Mage_Sales_Model_Order_Payment_Transaction::TYPE_ORDER ); if($orderTransaction){$orderTransaction->setIsClosed(true); $order->addRelatedObject($orderTransaction);}}}if(false===$this->_pro->capture($payment,$amount)){$this->_placeOrder($payment,$amount);}if($isAuthorizationCreated && isset($transaction)){$transaction->setIsClosed(true);}return $this;}public function refund(Varien_Object $payment,$amount){$this->_pro->refund($payment,$amount); return $this;}public function cancel(Varien_Object $payment){$this->void($payment); return $this;}public function canReviewPayment(Mage_Payment_Model_Info $payment){return parent::canReviewPayment($payment) && $this->_pro->canReviewPayment($payment);}public function acceptPayment(Mage_Payment_Model_Info $payment){parent::acceptPayment($payment); return $this->_pro->reviewPayment($payment, Mage_Paypal_Model_Pro::PAYMENT_REVIEW_ACCEPT);}public function denyPayment(Mage_Payment_Model_Info $payment){parent::denyPayment($payment); return $this->_pro->reviewPayment($payment, Mage_Paypal_Model_Pro::PAYMENT_REVIEW_DENY);}public function getCheckoutRedirectUrl(){return Mage::getUrl('paypal/express/start');}public function fetchTransactionInfo(Mage_Payment_Model_Info $payment,$transactionId){return $this->_pro->fetchTransactionInfo($payment,$transactionId);}public function validateRecurringProfile(Mage_Payment_Model_Recurring_Profile $profile){return $this->_pro->validateRecurringProfile($profile);}public function submitRecurringProfile(Mage_Payment_Model_Recurring_Profile $profile, Mage_Payment_Model_Info $paymentInfo ){$token=$paymentInfo-> getAdditionalInformation(Mage_Paypal_Model_Express_Checkout::PAYMENT_INFO_TRANSPORT_TOKEN); $profile->setToken($token); $this->_pro->submitRecurringProfile($profile,$paymentInfo);}public function getRecurringProfileDetails($referenceId, Varien_Object $result){return $this->_pro->getRecurringProfileDetails($referenceId,$result);}public function canGetRecurringProfileDetails(){return true;}public function updateRecurringProfile(Mage_Payment_Model_Recurring_Profile $profile){return $this->_pro->updateRecurringProfile($profile);}public function updateRecurringProfileStatus(Mage_Payment_Model_Recurring_Profile $profile){return $this->_pro->updateRecurringProfileStatus($profile);}public function assignData($data){$result=parent::assignData($data); $key=Mage_Paypal_Model_Express_Checkout::PAYMENT_INFO_TRANSPORT_BILLING_AGREEMENT; if(is_array($data)){$this->getInfoInstance()->setAdditionalInformation($key, isset($data[$key]) ? $data[$key] : null);}elseif($data instanceof Varien_Object){$this->getInfoInstance()->setAdditionalInformation($key,$data->getData($key));}return $result;}protected function _placeOrder(Mage_Sales_Model_Order_Payment $payment,$amount){$order=$payment->getOrder(); $token=$payment->getAdditionalInformation(Mage_Paypal_Model_Express_Checkout::PAYMENT_INFO_TRANSPORT_TOKEN); $api=$this->_pro->getApi() ->setToken($token) ->setPayerId($payment-> getAdditionalInformation(Mage_Paypal_Model_Express_Checkout::PAYMENT_INFO_TRANSPORT_PAYER_ID)) ->setAmount($amount) ->setPaymentAction($this->_pro->getConfig()->paymentAction) ->setNotifyUrl(Mage::getUrl('paypal/ipn/')) ->setInvNum($order->getIncrementId()) ->setCurrencyCode($order->getOrderCurrencyCode()) ->setPaypalCart(Mage::getModel('paypal/cart', array($order))) ->setIsLineItemsEnabled($this->_pro->getConfig()->lineItemsEnabled) ; $api->callDoExpressCheckoutPayment(); $this->_importToPayment($api,$payment); return $this;}protected function _importToPayment($api,$payment){$payment->setTransactionId($api->getTransactionId())->setIsTransactionClosed(0) ->setAdditionalInformation(Mage_Paypal_Model_Express_Checkout::PAYMENT_INFO_TRANSPORT_REDIRECT,$api->getRedirectRequired() ); if($api->getBillingAgreementId()){$payment->setBillingAgreementData(array( 'billing_agreement_id'=> $api->getBillingAgreementId(), 'method_code'=> Mage_Paypal_Model_Config::METHOD_BILLING_AGREEMENT ));}$this->_pro->importPaymentInfo($api,$payment);}public function canVoid(Varien_Object $payment){if($payment instanceof Mage_Sales_Model_Order_Invoice || $payment instanceof Mage_Sales_Model_Order_Creditmemo ){return false;}$info=$this->getInfoInstance(); if($info->getAdditionalInformation($this->_isOrderPaymentActionKey)){$orderTransaction=$info->lookupTransaction( false, Mage_Sales_Model_Order_Payment_Transaction::TYPE_ORDER ); if($orderTransaction){$info->setParentTransactionId($orderTransaction->getTxnId());}}return $this->_canVoid;}public function canCapture(){$payment=$this->getInfoInstance(); $this->_pro->getConfig()->setStoreId($payment->getOrder()->getStore()->getId()); if($payment->getAdditionalInformation($this->_isOrderPaymentActionKey)){$orderTransaction=$payment->lookupTransaction(false, Mage_Sales_Model_Order_Payment_Transaction::TYPE_ORDER ); if($orderTransaction->getIsClosed()){return false;}$orderValidPeriod=abs(intval($this->getConfigData('order_valid_period'))); $dateCompass=new DateTime($orderTransaction->getCreatedAt()); $dateCompass->modify('+' . $orderValidPeriod . ' days'); $currentDate=new DateTime(); if($currentDate > $dateCompass || $orderValidPeriod==0){return false;}}return $this->_canCapture;}protected function _callDoAuthorize($amount,$payment,$parentTransactionId){$api=$this->_pro->resetApi()->getApi() ->setAmount($amount) ->setCurrencyCode(Mage::app()->getStore()->getCurrentCurrencyCode()) ->setTransactionId($parentTransactionId) ->callDoAuthorization(); $payment->setAdditionalInformation($this->_authorizationCountKey,$payment->getAdditionalInformation($this->_authorizationCountKey) + 1 ); return $api;}protected function _isTransactionExpired(Mage_Sales_Model_Order_Payment_Transaction $transaction,$period){$period=intval($period); if(0==$period){return true;}$transactionClosingDate=new DateTime($transaction->getCreatedAt(), new DateTimeZone('GMT')); $transactionClosingDate->setTimezone(new DateTimeZone('US/Pacific')); $transactionClosingDate->setTime(11, 49, 00); $transactionClosingDate->modify('+' . $period . ' days'); $currentTime=new DateTime(null, new DateTimeZone('US/Pacific')); if($currentTime > $transactionClosingDate){return true;}return false;}}