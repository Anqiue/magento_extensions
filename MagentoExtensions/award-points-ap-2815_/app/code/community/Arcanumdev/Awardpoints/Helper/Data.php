<?php
 /*
 * Arcanum Dev AwardPoints
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is available through the world-wide-web at this URL:
 * http://opensource.org/licenses/osl-3.0.php
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to arcanumdev@wafunotamago.com so we can send you a copy immediately.
 *
 * @category   Magento Sale Extension
 * @package    AwardPoints
 * @copyright  Copyright (c) 2012 Arcanum Dev. Y.K. (http://arcanumdev.wafunotamago.com)
 * @license    http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
 class Arcanumdev_Awardpoints_Helper_Data extends Mage_Core_Helper_Abstract{public function getReferalUrl(){return $this->_getUrl('awardpoints/');}public function processMathValue($amount){$math_method=Mage::getStoreConfig('awardpoints/default/math_method',Mage::app()->getStore()->getId());if($math_method==1){$amount=round($amount);} elseif($math_method==0){$amount=floor($amount);}return $amount;}public function getProductPoints($product){$catalog_points=Mage::getModel('awardpoints/catalogpointrules')->getAllCatalogRulePointsGathered($product);if($catalog_points===false){return 0;}$product_points=$product->getData('award_points');if($product_points > 0){$points_tobeused=$product_points+(int)$catalog_points;if(Mage::getStoreConfig('awardpoints/default/max_point_collect_order',Mage::app()->getStore()->getId())){if((int)Mage::getStoreConfig('awardpoints/default/max_point_collect_order',Mage::app()->getStore()->getId()) < $points_tobeused){return Mage::getStoreConfig('awardpoints/default/max_point_collect_order',Mage::app()->getStore()->getId());}}return ($points_tobeused);} else{$_finalPriceInclTax =Mage::helper('tax')->getPrice($product, $product->getFinalPrice(), true);$_weeeTaxAmount=Mage::helper('weee')->getAmount($product);$price=$_finalPriceInclTax+$_weeeTaxAmount;$money_to_points=Mage::getStoreConfig('awardpoints/default/money_points',Mage::app()->getStore()->getId());if($money_to_points > 0){$price=$price*$money_to_points;}$points_tobeused=$this->processMathValue($price+(int)$catalog_points);if(Mage::getStoreConfig('awardpoints/default/max_point_collect_order',Mage::app()->getStore()->getId())){if((int)Mage::getStoreConfig('awardpoints/default/max_point_collect_order',Mage::app()->getStore()->getId()) < $points_tobeused){return Mage::getStoreConfig('awardpoints/default/max_point_collect_order',Mage::app()->getStore()->getId());}}return ($points_tobeused);}}public function convertMoneyToPoints($money){$points_to_get_money=Mage::getStoreConfig('awardpoints/default/points_money',Mage::app()->getStore()->getId());$money_amount=$this->processMathValue($money*$points_to_get_money);return $money_amount;}public function convertPointsToMoney($points_to_be_used){$customerId=Mage::getModel('customer/session')->getCustomerId();$award_model=Mage::getModel('awardpoints/stats');$current=$award_model->getPointsCurrent($customerId, Mage::app()->getStore()->getId());if($current < $points_to_be_used){Mage::getSingleton('checkout/session')->addError(Mage::helper('awardpoints')->__('Not enough points available.'));Mage::helper('awardpoints/event')->setCreditPoints(0);return 0;}$step=Mage::getStoreConfig('awardpoints/default/step_value',Mage::app()->getStore()->getId());$step_apply=Mage::getStoreConfig('awardpoints/default/step_apply',Mage::app()->getStore()->getId());if($step > $points_to_be_used && $step_apply){Mage::getSingleton('checkout/session')->addError(Mage::helper('awardpoints')->__('The minimum required points is not reached.'));Mage::helper('awardpoints/event')->setCreditPoints(0);return 0;}if($step_apply){if(($points_to_be_used % $step)!=0){Mage::getSingleton('checkout/session')->addError(Mage::helper('awardpoints')->__('Amount of points wrongly used.'));Mage::helper('awardpoints/event')->setCreditPoints(0);return 0;}}$points_to_get_money=Mage::getStoreConfig('awardpoints/default/points_money',Mage::app()->getStore()->getId());$discount_amount=$this->processMathValue($points_to_be_used/$points_to_get_money);return $discount_amount;}public function getPointsOnOrder($cartLoaded=null, $cartQuote=null){$awardPoints=0;if($cartLoaded!=null){$points_rules=Mage::getModel('awardpoints/pointrules')->getAllRulePointsGathered($cartLoaded);} else{$points_rules=Mage::getModel('awardpoints/pointrules')->getAllRulePointsGathered();}if($points_rules===false){return 0;}$awardPoints+=(int)$points_rules;if($cartLoaded==null){$cartHelper=Mage::helper('checkout/cart');$items=$cartHelper->getCart()->getItems();} elseif($cartQuote!=null){$items=$cartQuote->getAllItems();}else{$items=$cartLoaded->getAllItems();}$cart_amount=0;foreach ($items as $_item){$_product=Mage::getModel('catalog/product')->load($_item->getProductId());$catalog_points=Mage::getModel('awardpoints/catalogpointrules')->getAllCatalogRulePointsGathered($_product);if($catalog_points===false){continue;} else{if($cartLoaded==null || $cartQuote!=null){$awardPoints+=(int)$catalog_points*$_item->getQty();} else{$awardPoints+=(int)$catalog_points*$_item->getQtyOrdered();}}$product_points=$_product->getData('award_points');if($product_points > 0){if($_item->getQty() > 0 || $_item->getQtyOrdered() > 0){if($cartLoaded==null || $cartQuote!=null){$awardPoints+=(int)$product_points*$_item->getQty();} else{$awardPoints+=(int)$product_points*$_item->getQtyOrdered();}}} else{$price=$_item->getBaseRowTotal()+$_item->getBaseTaxAmount()-$_item->getBaseDiscountAmount();$awardPoints+=Mage::getStoreConfig('awardpoints/default/money_points',Mage::app()->getStore()->getId())*$price;}$cart_amount+=$_item->getBaseRowTotal()+$_item->getBaseTaxAmount()-$_item->getBaseDiscountAmount();}$awardPoints=$this->processMathValue($awardPoints);if(Mage::getStoreConfig('awardpoints/default/max_point_collect_order',Mage::app()->getStore()->getId())){if((int)Mage::getStoreConfig('awardpoints/default/max_point_collect_order',Mage::app()->getStore()->getId()) < $awardPoints){return Mage::getStoreConfig('awardpoints/default/max_point_collect_order',Mage::app()->getStore()->getId());}}return $awardPoints;}}