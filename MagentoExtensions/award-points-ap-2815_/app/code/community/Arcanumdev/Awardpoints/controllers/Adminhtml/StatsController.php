<?php
 /*
 * Arcanum Dev AwardPoints
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is available through the world-wide-web at this URL:
 * http://opensource.org/licenses/osl-3.0.php
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to arcanumdev@wafunotamago.com so we can send you a copy immediately.
 *
 * @category   Magento Sale Extension
 * @package    AwardPoints
 * @copyright  Copyright (c) 2012 Arcanum Dev. Y.K. (http://arcanumdev.wafunotamago.com)
 * @license    http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
 class Arcanumdev_Awardpoints_Adminhtml_StatsController extends Mage_Adminhtml_Controller_action{protected function _initAction(){$this->loadLayout()->_setActiveMenu('awardpoints/stats')->_addBreadcrumb(Mage::helper('awardpoints')->__('Statistics'), Mage::helper('awardpoints')->__('Statistics'));return $this;}public function indexAction(){$this->_initAction() ->_addContent($this->getLayout()->createBlock('awardpoints/adminhtml_stats')) ->renderLayout();}public function editAction(){$id= $this->getRequest()->getParam('id'); $model= Mage::getModel('awardpoints/stats')->load($id);if($model->getId()||$id == 0){$data=Mage::getSingleton('adminhtml/session')->getFormData(true);Mage::register('stats_data',$model);$this->loadLayout();$this->_setActiveMenu('awardpoints/stats');$this->_addBreadcrumb(Mage::helper('awardpoints')->__('Manage Points'), Mage::helper('adminhtml')->__('Manage Points'));$this->_addBreadcrumb(Mage::helper('awardpoints')->__('Point Configuration'), Mage::helper('adminhtml')->__('Point Configuration'));$this->getLayout()->getBlock('head')->setCanLoadExtJs(true);$this->_addContent($this->getLayout()->createBlock('awardpoints/adminhtml_stats_edit'));$this->renderLayout();} else{Mage::getSingleton('adminhtml/session')->addError(Mage::helper('awardpoints')->__('No points'));$this->_redirect('*/*/');}}public function newAction(){$this->_forward('edit');}public function checkpointsAction(){$id= $this->getRequest()->getParam('id');$model= Mage::getModel('awardpoints/stats')->load($id);$data=Mage::getSingleton('adminhtml/session')->getFormData(true);if(!empty($data)){$model->setData($data);}Mage::register('stats_data',$model);$this->loadLayout();$this->_setActiveMenu('awardpoints/stats');$this->getLayout()->getBlock('head')->setCanLoadExtJs(true);$this->_addContent($this->getLayout()->createBlock('awardpoints/adminhtml_stats_checkpoints'));$this->renderLayout();}public function savecheckAction(){if($data=$this->getRequest()->getPost()){$date=Mage::app()->getLocale()->date($data['from'], Zend_Date::DATE_SHORT, null, false);$time=$date->getTimestamp();$from=Mage::getModel('core/date')->gmtDate(null,$time);$date=Mage::app()->getLocale()->date($data['ends'], Zend_Date::DATE_SHORT, null, false);$time=$date->getTimestamp();$to=Mage::getModel('core/date')->gmtDate(null,$time);$order_states=array("processing","complete");$orders=Mage::getModel('sales/order')->getCollection()->addAttributeToSelect('*')->addAttributeToFilter('created_at', array('from' => $from, 'to' => $to))->joinAttribute('status','order/status','entity_id', null, 'left');$orders_array =array();$orders_array[]='0';foreach ($orders as $order){ $order=Mage::getModel('sales/order')->load($order->getId());$items=$order->getAllItems();$orders_array[]="'".$order->getIncrementId()."'";$cart_amount=0;$awardPoints=0;foreach ($items as $_item){$_product=Mage::getModel('catalog/product')->load($_item->getProductId());$product_points=$_product->getData('award_points');if($product_points > 0){$awardPoints += $product_points * $_item->getQtyOrdered();} else{ $price=$_item->getRowTotal()+$_item->getTaxAmount() - $_item->getDiscountAmount();$awardPoints += (int)Mage::getStoreConfig('awardpoints/default/money_points',Mage::app()->getStore()->getId()) * $price;}$cart_amount += $_item->getRowTotal()+$_item->getTaxAmount() - $_item->getDiscountAmount();}$award_model=Mage::getModel('awardpoints/stats');$test_points=$award_model->checkProcessedOrder($order->getCustomerId(),$order->getIncrementId(), true);if(!$test_points->getId()){$post=array('order_id' => $order->getIncrementId(), 'customer_id' => $order->getCustomerId(), 'store_id' => $order->getStoreId(), 'points_current' => $awardPoints);$award_model->setData($post);$award_model->save();} }Mage::getSingleton('adminhtml/session')->addSuccess(Mage::helper('awardpoints')->__('Full check was proceed on %s orders', (sizeof($orders_array)-1) ));Mage::getSingleton('adminhtml/session')->setFormData(false); $this->_redirect('*/*/');return;}Mage::getSingleton('adminhtml/session')->addError(Mage::helper('awardpoints')->__('Unable to proccess the full order checking'));$this->_redirect('*/*/');}public function saveAction(){if($data=$this->getRequest()->getPost()){if(isset($data['date_start'])){$date=Mage::app()->getLocale()->date($data['date_start'], Zend_Date::DATE_SHORT, null, false);$time=$date->getTimestamp();$data['date_start']=Mage::getModel('core/date')->gmtDate(null,$time); }if(isset($data['date_end'])){if($data['date_end'] != ""){$date=Mage::app()->getLocale()->date($data['date_end'], Zend_Date::DATE_SHORT, null, false);$time=$date->getTimestamp();$data['date_end']=Mage::getModel('core/date')->gmtDate(null,$time);}else{unset($data['date_end']);}}if(!empty($data)){$data['store_id']=implode(',',$data['store_id']);$model=Mage::getModel('awardpoints/stats');$model->setData($data) ->setId($this->getRequest()->getParam('id'));}try{$model->save();Mage::getSingleton('adminhtml/session')->addSuccess(Mage::helper('awardpoints')->__('Points were successfully saved'));Mage::getSingleton('adminhtml/session')->setFormData(false);if($this->getRequest()->getParam('back')){$this->_redirect('*/*/edit', array('id' => $model->getId()));return;}$this->_redirect('*/*/');return;} catch (Exception $e){Mage::getSingleton('adminhtml/session')->addError($e->getMessage());Mage::getSingleton('adminhtml/session')->setFormData($data);$this->_redirect('*/*/edit', array('id' => $this->getRequest()->getParam('id')));return;}}Mage::getSingleton('adminhtml/session')->addError(Mage::helper('awardpoints')->__('Unable to find points to save'));$this->_redirect('*/*/');}public function deleteAction(){if( $this->getRequest()->getParam('id') > 0 ){try{$model=Mage::getModel('awardpoints/stats');$model->setId($this->getRequest()->getParam('id'))->delete();Mage::getSingleton('adminhtml/session')->addSuccess(Mage::helper('awardpoints')->__('Points were successfully deleted'));$this->_redirect('*/*/');} catch (Exception $e){Mage::getSingleton('adminhtml/session')->addError($e->getMessage());$this->_redirect('*/*/edit', array('id' => $this->getRequest()->getParam('id')));}}$this->_redirect('*/*/');}public function massDeleteAction(){$ruleIds=$this->getRequest()->getParam('stats');if(!is_array($ruleIds)){Mage::getSingleton('adminhtml/session')->addError(Mage::helper('adminhtml')->__('Please select points'));} else{try{foreach ($ruleIds as $ruleId){$rule=Mage::getModel('awardpoints/points')->load($ruleId);$rule->delete();}Mage::getSingleton('adminhtml/session')->addSuccess(Mage::helper('awardpoints')->__('Total of %d points were successfully deleted', count($ruleIds)));} catch (Exception $e){ Mage::getSingleton('adminhtml/session')->addError($e->getMessage());}}$this->_redirect('*/*/index');}public function exportCsvAction(){$fileName= 'awardpoints.csv';$content=$this->getLayout()->createBlock('awardpoints/adminhtml_stats_grid')->getCsv();$this->_sendUploadResponse($fileName,$content);}public function exportXmlAction(){$fileName= 'awardpoints.xml';$content=$this->getLayout()->createBlock('awardpoints/adminhtml_stats_grid')->getXml();$this->_sendUploadResponse($fileName,$content);}protected function _sendUploadResponse($fileName,$content,$contentType='application/octet-stream'){$response=$this->getResponse();$response->setHeader('HTTP/1.1 200 OK','');$response->setHeader('Pragma','public', true);$response->setHeader('Cache-Control','must-revalidate, post-check=0, pre-check=0', true);$response->setHeader('Content-Disposition','attachment; filename='.$fileName);$response->setHeader('Last-Modified', date('r'));$response->setHeader('Accept-Ranges','bytes');$response->setHeader('Content-Length', strlen($content));$response->setHeader('Content-type',$contentType);$response->setBody($content);$response->sendResponse();die;}}